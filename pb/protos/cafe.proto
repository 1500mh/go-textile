syntax = "proto3";
option go_package = "pb";

import "google/protobuf/timestamp.proto";
import "model.proto";

message CafeChallenge {
    string address = 1;
}

message CafeNonce {
    string value = 1;
}

message CafeRegistration {
    string address = 1;
    string value   = 2;
    string nonce   = 3;
    bytes sig      = 4;
    string token   = 5;
}

message CafeSession {
    string id                      = 1;
    string access                  = 2;
    google.protobuf.Timestamp exp  = 3;
    string refresh                 = 4;
    google.protobuf.Timestamp rexp = 5;
    string subject                 = 6;
    string type                    = 7;
    Cafe cafe                      = 8;
}

message CafeSessions {
    repeated CafeSession values = 1;
}

message CafeRefreshSession {
    string access  = 1;
    string refresh = 2;
}

message CafePublishContact {
    string token    = 1;
    Contact contact = 2;
}

message CafePublishContactAck {
    string id = 1;
}

message CafeContactQuery {
    option deprecated   = true;
    string token        = 1;
    string findId       = 2;
    string findAddress  = 3;
    string findUsername = 4;
    int32 limit         = 5;
    int32 wait          = 6;
}

message CafeContactQueryResult {
    option deprecated         = true;
    repeated Contact contacts = 1;
}

message CafeStore {
    string token         = 1;
    repeated string cids = 2;
}

message CafeObjectList {
    repeated string cids = 1;
}

message CafeObject {
    string token = 1;
    string cid   = 2;
    bytes  data  = 3;
    bytes  node  = 4;
}

message CafeStoreThread {
    string token     = 1;
    string id        = 2;
    bytes ciphertext = 3; // encrypted CafeThread
}

message CafeThread {
    string key              = 1;
    bytes sk                = 2;
    string name             = 3;
    string schema           = 4;
    string initiator        = 5;
    Type type               = 6;
    State state             = 7;
    string head             = 8;
    Sharing sharing         = 9;
    repeated string members = 10;

    // Type controls read (R), annotate (A), and write (W) access
    enum Type {
        Private  = 0; // initiator: RAW, members:
        ReadOnly = 1; // initiator: RAW, members: R
        Public   = 2; // initiator: RAW, members: RA
        Open     = 3; // initiator: RAW, members: RAW
    }

    // Sharing controls if (Y/N) a thread can be shared
    enum Sharing {
        NotShared  = 0; // initiator: N, members: N
        InviteOnly = 1; // initiator: Y, members: N
        Shared     = 2; // initiator: Y, members: Y
    }

    // State indicates the loading state
    enum State {
        LoadingBehind = 0; // blocks are behind loaded behind head
        Loaded        = 1; // blocks are all loaded
        LoadingAhead  = 2; // blocks are being loaded ahead
    }
}

message CafeClientThread {
    string id        = 1;
    string clientId  = 2;
    bytes ciphertext = 3; // encrypted CafeThread
}

message CafeStored {
    string id = 1;
}

message CafeDeliverMessage {
    string id       = 1;
    string clientId = 2;
}

message CafeCheckMessages {
    string token = 1;
}

message CafeMessage {
    string id                      = 1;
    string peerId                  = 2;
    google.protobuf.Timestamp date = 3;
}

message CafeMessages {
    repeated CafeMessage messages = 1;
}

message CafeDeleteMessages {
    string token = 1;
}

message CafeDeleteMessagesAck {
    bool more = 1;
}
